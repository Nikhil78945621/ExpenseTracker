@page "/debts"
@inject ExpenseTracker.Services.UserService UserService
@inject NavigationManager Navigation
<link rel="stylesheet" href="css/Debt.css" />

@code {
    private ExpenseTracker.Components.model.AppData data = new ExpenseTracker.Components.model.AppData();
    private ExpenseTracker.Components.model.Debt newDebt = new();
    private ExpenseTracker.Components.model.User? loggedInUser;
    private string searchNote = string.Empty;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private bool isSortingAsc = true;

    protected override void OnInitialized()
    {
        loggedInUser = UserService.GetLoggedInUser(); // Get the logged-in user
        if (loggedInUser == null)
        {
            Navigation.NavigateTo("/login", true); // Redirect to login page if no user is logged in
        }
        else
        {
            data = UserService.LoadData() ?? new ExpenseTracker.Components.model.AppData
                {
                    Users = new List<ExpenseTracker.Components.model.User>(),
                    Debts = new List<ExpenseTracker.Components.model.Debt>()
                };
        }
    }

    private void AddDebt()
    {
        newDebt.Id = data.Debts.Count > 0 ? data.Debts.Max(d => d.Id) + 1 : 1;
        newDebt.UserId = loggedInUser.Id; // Automatically assign to logged-in user
        data.Debts.Add(newDebt);
        UserService.SaveData(data);
        newDebt = new(); // Reset the form
    }

    private void SortDebts()
    {
        if (isSortingAsc)
        {
            data.Debts = data.Debts.OrderBy(d => d.Date).ToList();
        }
        else
        {
            data.Debts = data.Debts.OrderByDescending(d => d.Date).ToList();
        }
        isSortingAsc = !isSortingAsc;
    }

    private IEnumerable<ExpenseTracker.Components.model.Debt> FilterDebts()
    {
        if (loggedInUser == null) return Enumerable.Empty<ExpenseTracker.Components.model.Debt>();

        // Filter debts based on the logged-in user
        var debts = data.Debts.Where(d => d.UserId == loggedInUser.Id);

        if (!string.IsNullOrEmpty(searchNote))
        {
            debts = debts.Where(d => !string.IsNullOrEmpty(d.Note) && d.Note.Contains(searchNote, StringComparison.OrdinalIgnoreCase));
        }

        if (filterStartDate.HasValue)
        {
            debts = debts.Where(d => d.Date >= filterStartDate.Value);
        }

        if (filterEndDate.HasValue)
        {
            debts = debts.Where(d => d.Date <= filterEndDate.Value);
        }

        return debts;
    }
}

<h3 class="text-center text-primary mt-4">Debt Management</h3>

<div class="container mt-4">
    @if (loggedInUser != null)
    {
            <!-- Search and Date Filter -->
            <div class="card mt-4 shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <strong>Filter Debts</strong>
                </div>
                <div class="card-body">
                    <label class="form-label">Search by Note:</label>
                    <input type="text" class="form-control mb-3" @bind="searchNote" placeholder="Search by Note" />

                    <div class="mb-3">
                        <label class="form-label">Start Date:</label>
                        <input type="date" class="form-control" @bind="filterStartDate" min="2010-01-01" max="2030-12-31" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">End Date:</label>
                        <input type="date" class="form-control" @bind="filterEndDate" min="2010-01-01" max="2030-12-31" />
                    </div>

                    <button type="button" class="btn btn-primary" @onclick="SortDebts">Sort by Date</button>
                </div>
            </div>

            <!-- Debt Details -->
            <div class="card mt-4 shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <strong>Debt Details</strong>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Date</th>
                                    <th>Note</th>
                                    <th>Total Amount</th>
                                    <th>Paid Amount</th>
                                    <th>Remaining</th>
                                </tr>
                            </thead>
                            <tbody>
                            @foreach (var debt in FilterDebts())
                            {
                                        <tr>
                                            <td>@debt.Date.ToShortDateString()</td>
                                            <td>@debt.Note</td>
                                            <td class="text-warning">@debt.Amount</td>
                                            <td class="text-success">@debt.PaidAmount</td>
                                            <td class="text-danger">@(debt.Amount - debt.PaidAmount)</td>
                                        </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Add Debt Form -->
            <div class="card mt-4 shadow-sm">
                <div class="card-header bg-dark text-white">
                    <strong>Add New Debt</strong>
                </div>
                <div class="card-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">Date:</label>
                            <input type="date" class="form-control" @bind="newDebt.Date" min="2010-01-01" max="2030-12-31" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Note:</label>
                            <input type="text" class="form-control" @bind="newDebt.Note" placeholder="Enter Note" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Total Amount:</label>
                            <input type="number" class="form-control" @bind="newDebt.Amount" placeholder="Enter total amount" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Paid Amount:</label>
                            <input type="number" class="form-control" @bind="newDebt.PaidAmount" placeholder="Enter paid amount" />
                        </div>
                        <button type="button" class="btn btn-primary w-100" @onclick="AddDebt">Add Debt</button>
                    </form>
                </div>
            </div>
    }
    else
    {
            <div class="container mt-4 text-center">
                <p class="alert alert-info">Please log in to view or add debts.</p>
            </div>
    }
</div>  